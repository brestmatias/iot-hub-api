package app

import (
	"context"
	"fmt"
	"log"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// https://manytools.org/hacker-tools/ascii-banner/
const logo = `
â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–„â–„â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“   â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„  â–ˆâ–ˆâ–“  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–“â–ˆâ–ˆâ–ˆ   â–„â–„â–„     â–„â–„â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“ â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–ˆâ–ˆâ–‘ â–ˆâ–ˆ â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆ  
â–“â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–’  â–ˆâ–ˆâ–’â–“  â–ˆâ–ˆâ–’ â–“â–’   â–’â–ˆâ–ˆâ–€ â–ˆâ–ˆâ–Œâ–“â–ˆâ–ˆâ–’â–’â–ˆâ–ˆ    â–’ â–“â–ˆâ–ˆâ–‘  â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–“  â–ˆâ–ˆâ–’ â–“â–’â–’â–ˆâ–ˆâ–€ â–€â–ˆ  â–“â–ˆâ–ˆâ–‘ â–ˆâ–ˆâ–’â–“â–ˆ   â–€ â–“â–ˆâ–ˆ â–’ â–ˆâ–ˆâ–’
â–’â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–‘  â–ˆâ–ˆâ–’â–’ â–“â–ˆâ–ˆâ–‘ â–’â–‘   â–‘â–ˆâ–ˆ   â–ˆâ–Œâ–’â–ˆâ–ˆâ–’â–‘ â–“â–ˆâ–ˆâ–„   â–“â–ˆâ–ˆâ–‘ â–ˆâ–ˆâ–“â–’â–’â–ˆâ–ˆ  â–€â–ˆâ–„ â–’ â–“â–ˆâ–ˆâ–‘ â–’â–‘â–’â–“â–ˆ    â–„ â–’â–ˆâ–ˆâ–€â–€â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆ   â–“â–ˆâ–ˆ â–‘â–„â–ˆ â–’
â–‘â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆ   â–ˆâ–ˆâ–‘â–‘ â–“â–ˆâ–ˆâ–“ â–‘    â–‘â–“â–ˆâ–„   â–Œâ–‘â–ˆâ–ˆâ–‘  â–’   â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–„â–ˆâ–“â–’ â–’â–‘â–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆâ–‘ â–“â–ˆâ–ˆâ–“ â–‘ â–’â–“â–“â–„ â–„â–ˆâ–ˆâ–’â–‘â–“â–ˆ â–‘â–ˆâ–ˆ â–’â–“â–ˆ  â–„ â–’â–ˆâ–ˆâ–€â–€â–ˆâ–„  
â–‘â–ˆâ–ˆâ–‘â–‘ â–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–‘  â–’â–ˆâ–ˆâ–’ â–‘    â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–“ â–‘â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–’â–ˆâ–ˆâ–’ â–‘  â–‘ â–“â–ˆ   â–“â–ˆâ–ˆâ–’ â–’â–ˆâ–ˆâ–’ â–‘ â–’ â–“â–ˆâ–ˆâ–ˆâ–€ â–‘â–‘â–“â–ˆâ–’â–‘â–ˆâ–ˆâ–“â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’
â–‘â–“  â–‘ â–’â–‘â–’â–‘â–’â–‘   â–’ â–‘â–‘       â–’â–’â–“  â–’ â–‘â–“  â–’ â–’â–“â–’ â–’ â–‘â–’â–“â–’â–‘ â–‘  â–‘ â–’â–’   â–“â–’â–ˆâ–‘ â–’ â–‘â–‘   â–‘ â–‘â–’ â–’  â–‘ â–’ â–‘â–‘â–’â–‘â–’â–‘â–‘ â–’â–‘ â–‘â–‘ â–’â–“ â–‘â–’â–“â–‘
 â–’ â–‘  â–‘ â–’ â–’â–‘     â–‘        â–‘ â–’  â–’  â–’ â–‘â–‘ â–‘â–’  â–‘ â–‘â–‘â–’ â–‘       â–’   â–’â–’ â–‘   â–‘      â–‘  â–’    â–’ â–‘â–’â–‘ â–‘ â–‘ â–‘  â–‘  â–‘â–’ â–‘ â–’â–‘
 â–’ â–‘â–‘ â–‘ â–‘ â–’    â–‘          â–‘ â–‘  â–‘  â–’ â–‘â–‘  â–‘  â–‘  â–‘â–‘         â–‘   â–’    â–‘      â–‘         â–‘  â–‘â–‘ â–‘   â–‘     â–‘â–‘   â–‘ 
 â–‘      â–‘ â–‘                 â–‘     â–‘        â–‘                 â–‘  â–‘        â–‘ â–‘       â–‘  â–‘  â–‘   â–‘  â–‘   â–‘     
                          â–‘                                              â–‘                                `

type App struct {
	Configs           *config.Configs
	StationController *station.Controller
}

func Start() {
	ctx := context.Background()
	app := buildApp(ctx)

	if app.Configs.GinMode == "release" {
		gin.SetMode(gin.ReleaseMode)
	}

	router := gin.New()
	buildRouter(ctx, router, app)
	router.Run(":" + app.Configs.Port)
	fmt.Println("ðŸ’ªðŸ’ªðŸ’ªðŸ’ªðŸ’ªðŸ’ªðŸ’ªðŸ’ªðŸ’ª IOT-DISPATCHER READY AND UP SERVING IN PORT: ", app.Configs.Port)
}

func buildApp(ctx context.Context) *App {
	fmt.Println("âš¡âš¡âš¡ STARTING IOT-DISPATCHER âš¡âš¡âš¡")
	fmt.Println(logo)
	configs := config.GetConfigs()

	client := buildMongoClient(configs, ctx)

	stationController := station.New(client)

	return &App{
		Configs:           configs,
		StationController: &stationController,
	}
}

func buildMongoClient(configs *config.Configs, ctx context.Context) *mongo.Client {
	clientOptions := options.Client().ApplyURI(configs.DBUri)
	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	err = client.Ping(ctx, nil)
	if err != nil {
		log.Fatal(err)
	}
	return client
}
